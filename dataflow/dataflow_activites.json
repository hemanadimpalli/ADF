{
	"name": "dataflow_activites",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Ds_blob_activites",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "exists1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "lookup1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as string,",
				"          LINE_ITEM_ID as string,",
				"          PRODUCT_ID as string,",
				"          UNIT_PRICE as string,",
				"          QUANTITY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(lesser(toInteger(PRODUCT_ID), 30),",
				"     greater(toInteger(ORDER_ID),350),",
				"     disjoint: false) ~> split1@(Output1, Output3, Output2)",
				"filter1, derivedColumn2 exists(split1@Output1@ORDER_ID == source1@ORDER_ID,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"split1@Output1 filter(and(equals(toInteger(PRODUCT_ID), 2),equals(toInteger(ORDER_ID),336))) ~> filter1",
				"source1 derive(Owner = \"Hema\") ~> derivedColumn2",
				"exists1, derivedColumn2 lookup(split1@Output1@ORDER_ID == source1@ORDER_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'both')~> lookup1"
			]
		}
	}
}