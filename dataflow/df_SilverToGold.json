{
	"name": "df_SilverToGold",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_silver_txttoParquet",
						"type": "DatasetReference"
					},
					"name": "OrderItemsFact"
				},
				{
					"dataset": {
						"referenceName": "ds_silver_products_jsonToParquet",
						"type": "DatasetReference"
					},
					"name": "ProductDimension"
				},
				{
					"dataset": {
						"referenceName": "ds_parquet_silver_order",
						"type": "DatasetReference"
					},
					"name": "OrderDimension"
				},
				{
					"dataset": {
						"referenceName": "ds_silver_jsonToParquet_Store",
						"type": "DatasetReference"
					},
					"name": "StoreDimension"
				},
				{
					"dataset": {
						"referenceName": "ds_silver_JSONtoparaquet_Customer",
						"type": "DatasetReference"
					},
					"name": "CustomerDimension"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_parquetSilverToGold",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select3"
				},
				{
					"name": "join4"
				},
				{
					"name": "select4"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as integer,",
				"          LINE_ITEM_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as string,",
				"          QUANTITY as integer,",
				"          INJECTED_BY as string,",
				"          INJECTED_DATE as date,",
				"          INJECTED_TIME as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrderItemsFact",
				"source(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          COLOR as string,",
				"          UNIT_PRICE as string,",
				"          INJGESTED_BY as string,",
				"          INJGESTED_DATE as date,",
				"          INJGESTED_TIME as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ProductDimension",
				"source(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string,",
				"          INJGESTED_BY as string,",
				"          INJGESTED_DATE as date,",
				"          INJGESTED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrderDimension",
				"source(output(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          INJECTED_BY as string,",
				"          INJECTED_DATE as date,",
				"          INJECTED_TIME as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> StoreDimension",
				"source(output(",
				"          CUSTOMER_ID as integer,",
				"          FIRST_NAME as string,",
				"          SECOND_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          INJECTED_BY as string,",
				"          INJECTED_DATE as date,",
				"          INJECTED_TIME as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CustomerDimension",
				"OrderItemsFact, ProductDimension join(OrderItemsFact@PRODUCT_ID == ProductDimension@PRODUCT_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          ORDER_ID,",
				"          LINE_ITEM_ID,",
				"          PRODUCT_ID = OrderItemsFact@PRODUCT_ID,",
				"          UNIT_PRICE = OrderItemsFact@UNIT_PRICE,",
				"          QUANTITY,",
				"          PRODUCT_NAME,",
				"          COLOR,",
				"          UNIT_PRICE = ProductDimension@UNIT_PRICE,",
				"          INJGESTED_BY,",
				"          INJGESTED_DATE,",
				"          INJGESTED_TIME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, OrderDimension join(select1@ORDER_ID == OrderDimension@ORDER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          ORDER_ID = select1@ORDER_ID,",
				"          PRODUCT_ID,",
				"          LINE_ITEM_ID,",
				"          PRODUCT_NAME,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          ORDER_DATETIME,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          INGESTED_BY = INJECTED_BY,",
				"          INGESTED_DATE = INJECTED_DATE,",
				"          INGESTED_TIMESTAMP = INJECTED_TIMESTAMP,",
				"          COLOR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, StoreDimension join(select2@STORE_ID == StoreDimension@STORE_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          CUSTOMER_ID,",
				"          PRODUCT_ID,",
				"          ORDER_ID,",
				"          LINE_ITEM_ID,",
				"          STORE_ID = select2@STORE_ID,",
				"          ORDER_STATUS,",
				"          PRODUCT_NAME,",
				"          STORE_NAME,",
				"          WEB_ADDRESS,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          ORDER_DATETIME,",
				"          INJECTED_BY = INGESTED_BY,",
				"          INJECTED_DATE = INGESTED_DATE,",
				"          INJECTED_TIMESTAMP = INGESTED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3, CustomerDimension join(select3@CUSTOMER_ID == CustomerDimension@CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4 select(mapColumn(",
				"          CUSTOMER_ID = select3@CUSTOMER_ID,",
				"          PRODUCT_ID,",
				"          ORDER_ID,",
				"          STORE_ID,",
				"          LINE_ITEM_ID,",
				"          PRODUCT_NAME,",
				"          STORE_NAME,",
				"          ORDER_STATUS,",
				"          WEB_ADDRESS,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          ORDER_DATETIME,",
				"          FIRST_NAME,",
				"          SECOND_NAME,",
				"          EMAIL_ADDRESS,",
				"          INJECTED_BY = select3@INJECTED_BY,",
				"          INJECTED_DATE = select3@INJECTED_DATE,",
				"          INJECTED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 cast(output(",
				"          UNIT_PRICE as integer,",
				"          LATITUDE as decimal(10,0),",
				"          LONGITUDE as decimal(10,0)",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive(ORDER_DATETIME = toTimestamp(ORDER_DATETIME,\"dd-MMM-yy HH.mm.ss.SS\")) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          ORDER_ID as integer,",
				"          STORE_ID as integer,",
				"          LINE_ITEM_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          STORE_NAME as string,",
				"          ORDER_STATUS as string,",
				"          WEB_ADDRESS as string,",
				"          UNIT_PRICE as integer,",
				"          QUANTITY as integer,",
				"          LATITUDE as decimal(10,0),",
				"          LONGITUDE as decimal(10,0),",
				"          ORDER_DATETIME as string,",
				"          FIRST_NAME as string,",
				"          SECOND_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          INJECTED_BY as string,",
				"          INJECTED_DATE as date,",
				"          INJECTED_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}